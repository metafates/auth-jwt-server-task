// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// JWT defines model for JWT.
type JWT struct {
	AccessToken string `json:"access_token"`
	ExpiresAt   int64  `json:"expires_at"`
}

// PostAuthParams defines parameters for PostAuth.
type PostAuthParams struct {
	Guid string `form:"guid" json:"guid"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Logs in and returns the authentication  cookie
	// (POST /auth)
	PostAuth(ctx echo.Context, params PostAuthParams) error
	// Refreshes JWT token
	// (POST /refresh)
	PostRefresh(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuth converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuth(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthParams
	// ------------- Required query parameter "guid" -------------

	err = runtime.BindQueryParameter("form", true, true, "guid", ctx.QueryParams(), &params.Guid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter guid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuth(ctx, params)
	return err
}

// PostRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) PostRefresh(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRefresh(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth", wrapper.PostAuth)
	router.POST(baseURL+"/refresh", wrapper.PostRefresh)

}

type InternalServerErrorResponse struct {
}

type JWTResponseHeaders struct {
	SetCookie string
}
type JWTJSONResponse struct {
	Body struct {
		AccessToken string `json:"access_token"`
		ExpiresAt   int64  `json:"expires_at"`
	}

	Headers JWTResponseHeaders
}

type UnauthorizedErrorResponse struct {
}

type PostAuthRequestObject struct {
	Params PostAuthParams
}

type PostAuthResponseObject interface {
	VisitPostAuthResponse(w http.ResponseWriter) error
}

type PostAuth200JSONResponse struct{ JWTJSONResponse }

func (response PostAuth200JSONResponse) VisitPostAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostAuth400Response = InternalServerErrorResponse

func (response PostAuth400Response) VisitPostAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostAuth401Response = UnauthorizedErrorResponse

func (response PostAuth401Response) VisitPostAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostRefreshRequestObject struct {
}

type PostRefreshResponseObject interface {
	VisitPostRefreshResponse(w http.ResponseWriter) error
}

type PostRefresh200JSONResponse struct{ JWTJSONResponse }

func (response PostRefresh200JSONResponse) VisitPostRefreshResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostRefresh400Response = InternalServerErrorResponse

func (response PostRefresh400Response) VisitPostRefreshResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostRefresh401Response = UnauthorizedErrorResponse

func (response PostRefresh401Response) VisitPostRefreshResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Logs in and returns the authentication  cookie
	// (POST /auth)
	PostAuth(ctx context.Context, request PostAuthRequestObject) (PostAuthResponseObject, error)
	// Refreshes JWT token
	// (POST /refresh)
	PostRefresh(ctx context.Context, request PostRefreshRequestObject) (PostRefreshResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictEchoHandlerFunc
type StrictMiddlewareFunc = runtime.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostAuth operation middleware
func (sh *strictHandler) PostAuth(ctx echo.Context, params PostAuthParams) error {
	var request PostAuthRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuth(ctx.Request().Context(), request.(PostAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthResponseObject); ok {
		return validResponse.VisitPostAuthResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostRefresh operation middleware
func (sh *strictHandler) PostRefresh(ctx echo.Context) error {
	var request PostRefreshRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRefresh(ctx.Request().Context(), request.(PostRefreshRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRefresh")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostRefreshResponseObject); ok {
		return validResponse.VisitPostRefreshResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xUXXPiRhD8K1uTPCqAP6tOqTxc+c6O5GDOhjsncVy+tTRCA2h3PbsyyBT/PbUr2UC+",
	"n/PESvS0ent6Zg2ZroxWqJyFeA2M1mhlMTwkyiEruRgjPyN/ZNbsX+doMybjSCuI30DCBpTAANtEkN5O",
	"PDrTyqFy/iiNWVAmfWF/Zn31GmxWYiX9ybA2yI7ab8ssQ2sfnJ5jwLnGIMRgHZOaenpcGWK0DzJQF5or",
	"fwJS7vQYolc8KYdTZNhsImB8qokxh/hun36P7P6tVj/OMHOw8bX7d05vJ6JlEIFBLMmVIpCE24lcOuwJ",
	"D2MsGG3Z4cgKRlezwlyQElJkWs8JhZIV5uJrB25lfe395qWVKHPk4MkY3XdnoWDfOVzJyiy85D2CH7BJ",
	"y8eLjEaUJp9fkoMrSmyibk6ys+Q0mZufv5yl73rYpC/5bUIjSlbD2XBwNfnlaPRhvkxoSY/Vuft1HMDP",
	"8uJ4enPxbuHfy9vzQTLTq6vJx8PhbHgy/JA0xXVvXCwuV8ubdDzEy8vzw+vJcbE0Q0yLo9NPo/lpk355",
	"kPm1tcuT7Hvxo3NmpBbNtlevvQ2Gf1aydqVmesH8b5L3frcDZEVF1pKaCs2C1LNcUB7abjGrmVwz9n61",
	"4XpEycjva1dun85fE+RzG7XuelXtv1uVpXOmzQSpQodokgvmQwTPyLYV5yOqDSppCGI46h30BhCBka4M",
	"Cvqy+7jRNgTYZz9kJ8khhk/auiDPl7Cs0IUI3K2BPPlTjeyN87GBGKY15bCbb8c1RjsB+aPB99H+oB8O",
	"Bv7nW8YCYvimv90J/Tdc3/uyieD4v2D/anOE2oN/r/1z53e7CPHdfQS2rirJDcTwk57aMEoq70bLClei",
	"8ByoXLduRDdogarfTck/23/Tgf4/VnU3QhsWU7v6/LD9HgAA//9Xyj70BAYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
